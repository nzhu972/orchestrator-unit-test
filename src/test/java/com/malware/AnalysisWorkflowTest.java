package com.malware;

import org.jbpm.test.JbpmJUnitBaseTestCase;
import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;
import org.junit.Test;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.manager.RuntimeEngine;
import org.kie.api.runtime.manager.RuntimeManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class AnalysisWorkflowTest extends JbpmJUnitBaseTestCase{
    private static final Logger log = LoggerFactory.getLogger(AnalysisWorkflowTest.class);

    private RuntimeManager runtimeManager;
    private RuntimeEngine runtimeEngine;
    private KieSession kieSession;

    public AnalysisWorkflowTest() {
        super(true, true);
    }
    /*
     * JUnit test case to test the workflow defined in business central. 
     * The name of the workflow is FileAnalysis.bpmn
     * Prerequisite: Must build and deploy the orchestrator project in business central prior to 
     * running the unit test case to ensure the latest update is included from the bpmn file. 
     * 
     * Workitem handler which is implemented in the workflow is mocked so no live rest api calls are made.
     * The purpose of the test case is to confirm the workflow is moving from one node to another.
     */
    @Test
    public void testProcess() {

        runtimeManager = createRuntimeManager("com/malware/analysisworkflow/FileAnalysis.bpmn");
        runtimeEngine = getRuntimeEngine();
        kieSession = runtimeEngine.getKieSession();

        // register a test handler for "Rest" 
        TestWorkItemHandler testHandler = getTestWorkItemHandler();

        kieSession.getWorkItemManager().registerWorkItemHandler("Rest", testHandler);
        
        // start the workflow instance
        RuleFlowProcessInstance processInstance = (RuleFlowProcessInstance) kieSession.startProcess("AnalysisWorkflow.DynamicStaticAnalysis");

        log.info("->>> Workflow processInstance {} started", processInstance.getId());

        // retrieve the workitem handler id for id generator
        long workItemId = testHandler.getWorkItem().getId();
        
        log.info("->>> Workitem id {} started", workItemId);
        
        // complete id generator so the workflow can move on to the next node
        kieSession.getWorkItemManager().completeWorkItem(workItemId, null);
        

        // retrieve the workitem handler id for submission record
        long submissionWorkItemId = testHandler.getWorkItem().getId();
        log.info("->>> Submission Workitem id {} started", submissionWorkItemId);
        
        // complete submission record so the workflow can move on to the next node
        kieSession.getWorkItemManager().completeWorkItem(submissionWorkItemId, null);
        
        assertProcessInstanceActive(processInstance.getId());
        assertNodeTriggered(processInstance.getId(), "ID Generator");        
        assertNodeTriggered(processInstance.getId(), "Submission");
        assertNodeTriggered(processInstance.getId(), "Move File");
        
        kieSession.dispose();
        runtimeManager.disposeRuntimeEngine(runtimeEngine);
        runtimeManager.close();
    }

}
