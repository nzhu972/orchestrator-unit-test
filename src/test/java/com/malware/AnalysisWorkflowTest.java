package com.malware;

import org.jbpm.test.JbpmJUnitBaseTestCase;
import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;
import org.junit.Test;
import org.kie.api.runtime.KieSession;
import org.kie.api.runtime.manager.RuntimeEngine;
import org.kie.api.runtime.manager.RuntimeManager;
import org.kie.api.task.TaskService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class AnalysisWorkflowTest extends JbpmJUnitBaseTestCase{
    private static final Logger log = LoggerFactory.getLogger(AnalysisWorkflowTest.class);

    private RuntimeManager runtimeManager;
    private RuntimeEngine runtimeEngine;
    private KieSession kieSession;

    public AnalysisWorkflowTest() {
        super(true, true);
    }
    
    @Test
    public void testProcess() {

        runtimeManager = createRuntimeManager("com/malware/analysisworkflow/FileAnalysis.bpmn");
        runtimeEngine = getRuntimeEngine();
        kieSession = runtimeEngine.getKieSession();

        // register a test handler for "Rest"
        TestWorkItemHandler testHandler = getTestWorkItemHandler();

        kieSession.getWorkItemManager().registerWorkItemHandler("Rest", testHandler);
        
        RuleFlowProcessInstance processInstance = (RuleFlowProcessInstance) kieSession.startProcess("AnalysisWorkflow.DynamicStaticAnalysis");

        log.info("->>> Workflow processInstance {} started", processInstance.getId());

        assertProcessInstanceActive(processInstance.getId());
        assertNodeTriggered(processInstance.getId(), "ID Generator");
        
        kieSession.dispose();
        runtimeManager.disposeRuntimeEngine(runtimeEngine);
        runtimeManager.close();
    }

}
